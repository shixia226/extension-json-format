{
    "pluginDesc": { "message": "JSON format" },
    "toastCopy": { "message": "JSON fragment is copied successfully!" },
    "toastSucessFilter": { "message": "Set up the filter successfully!" },
    "toastErrorFilter": { "message": "Filter condition format error!" },
    "toastExpand": { "message": "Expand the JSON fragment!" },
    "toastCollapse": { "message": "Fold the JSON fragment!" },
    "btnCopy": { "message": "Copy" },
    "btnFilter": { "message": "Filter" },
    "btnExpand": { "message": "Expand" },
    "btnCollapse": { "message": "Collapse" },
    "btnApply": { "message": "Apply" },
    "btnSave": { "message": "Save" },
    "btnClose": { "message": "Close" },
    "titleHistory": { "message": "History Filter List" },
    "successDelete": { "message": "Delete success!" },
    "successUpdate": { "message": "Update success!" },
    "successSave": { "message": "New success!" },
    "confirmDelete": { "message": "Are you sure you want to delete [$1]?" },
    "confirmUpdate": { "message": "Are you sure you want to update [$1]?" },
    "promtInput": { "message": "Please enter the new filter condition name:" },
    "expressInfo": { "message": "[Javascript expression]\n\nIf the expression is true when the corresponding node and its upper and lower levels are displayed, you can use variables: name (attribute name), value (attribute value), leaf (leaf node), level (attribute level).\n\n, for example, we want to hide the leaf node expression with the attribute name of'exp', the attribute value of 1 and the level of 2. : \n\n\nname==='exp'& & value===1 & & level===2 & & leaf===true" }
}